{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/Software Engineering/Data Structure/Heap vs RedBlackTree","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#datastructure\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cs.stackexchange.com/questions/105899/why-use-heap-over-red-black-tree\"\n  }, \"cs stackexchange\")), mdx(\"p\", null, \"heap and rbt have similar insert/remove property\\nfinding element in heap is O(n) while rbt is O(lg n)\\nrbt takes more memory footprint (more pointers) and bookkeeping on the structure itself but can be sparse\\nwhile heap usually use array which have dynamic resize cost but clustered in memory\\ncan use treemap for heap operation (get min/max)\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/Software Engineering/Data Structure/Heap vs RedBlackTree","title":"Heap vs RedBlackTree"}}},"pageContext":{"id":"6455d0f1-1848-578e-94cc-175a03d03eb0"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}