{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/Software Engineering/Event Handling/listening-to-binlog","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"knowledge\",\n  \"keywords\": \"binlog database event-handling\",\n  \"tags\": \"event-handling database\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Listening to Binlog\"), mdx(\"p\", null, \"Note Created: 2021-05-22\"), mdx(\"hr\", null), mdx(\"p\", null, \"It's possible to listen to database binlog as an event stream.\\nThis can then be handled following event-handling pattern.\\nThe binlog events can trigger any action based on the changed data e.g. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Cache-Invalidation\",\n    \"title\": \"Cache Invalidation\"\n  }, \"[[Cache Invalidation]]\"), \" / write on certain data.\"), mdx(\"p\", null, \"This might seem like overkill or wasteful if only a small subset of binlog event is of interest.\\nHowever this is an easy way of adding event handling that ensures committed action.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/Software Engineering/Event Handling/listening-to-binlog","title":"Listening to Binlog"}}},"pageContext":{"id":"bf77ceef-2c70-5890-9b02-4def5e3665ab"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}