{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/docs/Testing/Flaky test/Tests that sometimes Fail","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"article\",\n  \"keywords\": null,\n  \"tags\": \"test flaky-test\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Tests that sometimes failed\"), mdx(\"p\", null, \"link: \", \"[https://samsaffron.com/archive/2019/05/15/tests-that-sometimes-fail]\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#1-definition\"\n  }, \"1. Definition\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#2-background\"\n  }, \"2. Background\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#3-several-pattern-of-flakiness\"\n  }, \"3. Several pattern of Flakiness\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#31-hard-coded-id\"\n  }, \"3.1. Hard coded id\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#32-random-data\"\n  }, \"3.2. Random data\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#33-database-execution-ordering-assumptions\"\n  }, \"3.3. Database execution ordering assumptions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#34-time-assumptions\"\n  }, \"3.4. Time assumptions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#35-concurrency\"\n  }, \"3.5. Concurrency\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#36-leaky-global-state\"\n  }, \"3.6. Leaky global state\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#37-assumptions-about-environment\"\n  }, \"3.7. Assumptions about environment\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#4-how-to-handle-flaky-test\"\n  }, \"4. How to handle Flaky test\"))), mdx(\"h2\", null, \"1. Definition\"), mdx(\"p\", null, \"Sometimes when tests are written, they might become test that fails intermittently. These are called flaky test or heisentest (in relation to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Heisenbug\"\n  }, \"heisenbug\"), \")\"), mdx(\"h2\", null, \"2. Background\"), mdx(\"p\", null, \"Flaky test incurs cost not only in time spent on the pipeline, but also on developer's time.\\nHence it is crucial that we either remove flakiness or fix it.\\nFixing flaky tests might also result in fixing an actual bug hidden inside the code.\"), mdx(\"h2\", null, \"3. Several pattern of Flakiness\"), mdx(\"h3\", null, \"3.1. Hard coded id\"), mdx(\"p\", null, \"When using database with auto increment ids, sometimes its easier for us to simply assign id and check whether it is equal to some hard coded id.\\nThis can be further generalized as any hardcoded assumptions.\\nTODO: reread and fix this part\"), mdx(\"h3\", null, \"3.2. Random data\"), mdx(\"p\", null, \"some unexpected data/input can expose a bug or a wrong assumption deep inside the code.\\nThis is how Fuzzy testing (or commonly known as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Fuzzing\"\n  }, \"Fuzzing\"), \" come to be.\\nFuzzy testing work by generating random data with some restriction which is used to hit the system.\"), mdx(\"h3\", null, \"3.3. Database execution ordering assumptions\"), mdx(\"p\", null, \"this is related to point 1 in that order should not be assumed unless explicitly ordered by the developer (no pun intended)\"), mdx(\"h3\", null, \"3.4. Time assumptions\"), mdx(\"p\", null, \"Time is one of those things that we don't usually think about testing for/about; because, how can Time fail?\\nHowever, code that is basing its logic on time can fail and code should be designed to be easily testable even against time.\"), mdx(\"p\", null, \"Related to this is places where we use time.Sleep to wait on some asynchronous or background processing.\\nThis is a typical flaky smell; not only does this make your test take longer, it's also implicit on what it's waiting for.\\nIf the code needs to take some specific amount of time, then it should be explicit.\\nOtherwise, Test should not rely on sleep to wait on some correct state.\\nInstead, use polling or some explicit way to sync the state.\\nPossibly by calling a function and processing it synchronously instead of waiting on some state to be true.\"), mdx(\"h3\", null, \"3.5. Concurrency\"), mdx(\"p\", null, \"Semi-related to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#time-assumptions\"\n  }, \"time assumptions\"), \".\\nIf we use background processing in test, it could result race condition.\\nEspecially if tests are run in parallel.\"), mdx(\"h3\", null, \"3.6. Leaky global state\"), mdx(\"p\", null, \"Sometimes tests modifies some global state.\\nUnless the test suite are reset to a pristine state, there can be some modified global state between tests.\\nThis would result in some condition being true only if tests are run in certain order.\\nHence why tests should always be run in random order.\"), mdx(\"h3\", null, \"3.7. Assumptions about environment\"), mdx(\"p\", null, \"Remember that in the end your code are not only running locally.\\nIt is also tested locally, in CI/CD pipeline, and running in production.\\nIt is hard to make sure the condition is always the same (even if you use container).\\nThere will be small differences here and there and thats why you should challenge your assumptions.\\nTODO: reread this part and fix\"), mdx(\"h2\", null, \"4. How to handle Flaky test\"), mdx(\"p\", null, \"Handling flaky test should be a team effort.\\nAssign flaky test to original test writer to fix, and give post mortem on how it come to be.\\nTreat it like an incident and figure out the root cause.\"), mdx(\"p\", null, \"Below are several points on how to work as a team to reduce flakiness:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Should be a team concern\\nIt should be a team decision to either remove, run repeatedly, ignore, or invest time to find cause and fix\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Stopping deployment if any test failed\\nDepends on urgency, when deployment timeline is tight, test can be quarantined/excluded temporarily\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run test in random order\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Invest in making tests run faster\\nTighter loop means it can be run faster on a loop and flaky test are found faster\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Regularly run test suite\\nThis can be done in asynchronous manner to actual code change to prod.\\nVery rare flaky test can be found if your test suite are fast and you're running it endlessly (even if say chance of happening is 1/xxxxx)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add log in unexpected flaky case\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/docs/Testing/Flaky test/Tests that sometimes Fail","title":"Tests that sometimes failed"}}},"pageContext":{"id":"b28365d1-8747-5c07-ba1f-3d73c723a36c"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}