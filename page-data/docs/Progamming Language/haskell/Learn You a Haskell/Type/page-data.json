{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/docs/Progamming Language/haskell/Learn You a Haskell/Type","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Types starts with capital case.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Int\"), \" normal integer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Integer\"), \" unlimited integer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Float\"), \" single precision floating point number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Double\"), \" double precision floating point\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Bool\"), \" boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Char\"), \" character. single quote.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String\"), \" syntac sugar for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[Char]\"))), mdx(\"p\", null, \"Type Variable\\nis kind of like generics. type variables allow writing general function that does not use behaviour of the type.\\npolymorphic function - function that have type variables\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-haskell\"\n  }, \"Prelude> :t head\\nhead :: [a] -> a\\n\")), mdx(\"p\", null, \"Typeclasses\\nkind of similar of inheritance but of types. typeclass allows a kind of declaration of interface for type.\\nfew basic typeclass:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Eq\"), \" supports equality testing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ord\"), \" supports ordering.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Show\"), \" string representation of a value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Read\"), \" is the opposite of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Show\"), \". it reads a string and return a \\\"parsed\\\" value. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Read\"), \" requires explicit or inferred type result.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-hs\"\n  }, \">read \\\"4\\\"\\n<interactive>:1:0:\\n    Ambiguous type variable `a' in the constraint:\\n      `Read a' arising from a use of `read' at <interactive>:1:0-7\\n    Probable fix: add a type signature that fixes these type variable(s)\\n\\n> read \\\"5\\\" :: Int\\n5\\n\\n> read \\\"5\\\" :: Float\\n5.0\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Enum\"), \" sequentially ordered type. can be enumerated or with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"succ\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"pred\"), \" functions. can be used in list ranges.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Bounded\"), \" have an upper and a lower bound.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Num\"), \" numeric typeclass. can act like numbers. whole number are polymorphic constant. it can change into any member of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Num\"), \" typeclass. (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"5 -> 5.0 :: float\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Integral\"), \" only integral numbers. (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Int\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Integer\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Floating\"), \" only floating point numbers. (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Float\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Double\"), \")\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/docs/Progamming Language/haskell/Learn You a Haskell/Type","title":"Type"}}},"pageContext":{"id":"9de558fa-a185-5387-831c-534218f65d66"}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}